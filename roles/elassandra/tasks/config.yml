---
- name: Setting facts for RPM Elassanda install
  set_fact:
    elassandra_home: "/usr/share/cassandra"
    elassandra_conf: "/etc/cassandra"
    elassandra_bin: "/usr/bin"
    elassandra_plugins: "/usr/share/cassandra/plugins"
    elassandra_logs: "/var/log/cassandra"
    elassandra_data: "/var/lib/cassandra"


#- name: "Add elassandra to /etc/hosts"
#  lineinfile:
#    dest: /etc/hosts
#    regexp: '.*elassandra$'
#    line: "{{ elassandra_broadcast_rpc_address }} elassandra"
#    state: present

- name: Build configuration files locally
  template: src={{ item }} dest={{ elassandra_conf }}/{{ item }} owner={{ elassandra_user }} group={{ elassandra_group }} mode=0644
  become: true
  with_items:
   - elasticsearch.yml
   - cassandra.yaml
   - cassandra-env.sh
   - cassandra-rackdc.properties
   - cassandra-topology.properties
   #- influxdb-reporting.yaml
   - logback.xml
   - cassandra-rackdc.properties
   - jvm.options
   #- license.json

- name: Copy /usr/java/jdk1.8/jre/lib/management/jmxremote.access
  copy: src=jmxremote.access dest=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64/jre/lib/management/jmxremote.access owner=root group=root mode=0644
  become: true

- name: Copy /etc/cassandra/jmxremote.password
  template: src=jmxremote.password dest=/etc/cassandra/jmxremote.password owner=cassandra group=cassandra mode=0400
  become: true

- name: Grant read access to /etc/cassandra/jmxremote.password
  acl:
    path: /etc/cassandra/jmxremote.password
    entity: "{{ item }}"
    etype: user
    permissions: r
    state: present
  become: true
  with_items:
    - centos
    - root

#- name: Copy aliases.sh to /etc/profile.d/cassandra.sh
#  become: true
#  copy: src=/usr/share/cassandra/aliases.sh dest=/etc/profile.d/cassandra.sh

#- name: Update owner of /etc/profile.d/cassandra.sh
#  become: true
#  file: owner={{ elassandra_user }} group={{ elassandra_group }} mode=0664

- name: ensure firewalld is started
  become: true
  systemd:
    name: firewalld
    enabled: yes
    state: started
    masked: no

- name: Build start configuration in /etc/sysconfig/cassandra
  template: src=sysconfig-cassandra.j2 dest=/etc/sysconfig/cassandra owner=root group=root mode=0664
  become: true

# TODO: separate rules for interconnect et rpc networks.
- name: Open firewalld incomming ports on interconnect (7000+7001+7199 + 9300-9400) + rpc networks (9042+9142+9160 + 9200-9300)
  become: true
  firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  with_items:
    - 7000/tcp
    - 7001/tcp
    - 7199/tcp
    - 9042/tcp
    - 9142/tcp
    - 9160/tcp
    - 9200-9400/tcp
    - 7500/tcp

- name: set permission on /var/log/cassandra and /var/lib/cassandra
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: cassandra
    group: cassandra
    mode: 0755
  with_items:
    - /var/log/cassandra
    - /var/lib/cassandra

- name: ensure .cassandra directory exists
  become: true
  file:
    path: "{{ item.home }}/.cassandra"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0700
  with_items:
    - { home: /home/centos, user: centos, group: centos }
    - { home: /root, user: root, group: root }

- name: deploy cqlshrc for root and centos
  become: true
  template:
    src: cqlshrc
    dest: "{{ item.home }}/.cassandra/cqlshrc"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0400
  with_items:
    - { home: /home/centos, user: centos, group: centos }
    - { home: /root, user: root, group: root }

- name: deploy nodetool-ssl.properties for root and centos
  become: true
  template:
    src: nodetool-ssl.properties
    dest: "{{ item.home }}/.cassandra/nodetool-ssl.properties"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0400
  with_items:
    - { home: /home/centos, user: centos, group: centos }
    - { home: /root, user: root, group: root }

- name: deploy curlrc for root and centos
  become: true
  template:
    src: curlrc
    dest: "{{ item.home }}/.curlrc"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0400
  with_items:
    - { home: /home/centos, user: centos, group: centos }
    - { home: /root, user: root, group: root }
